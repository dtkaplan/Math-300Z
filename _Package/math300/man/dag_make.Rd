% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dag_make.R
\name{dag_make}
\alias{dag_make}
\title{Construct a DAG object}
\usage{
dag_make(...)
}
\arguments{
\item{\dots}{one or more formulas in the DAG format
puts the right class on a dag, so that sample will work.}
}
\description{
DAG objects are made from formulas. Each formula has a variable name
on the left-hand size, and an expression on the right-hand side. The expression is to
to be written using variables defined in earlier formulas, as well as random
number generators, etc.
}
\details{
Some random number generators are built in, and can be used in the DAG.
\itemize{
\item \code{exo(sd=1)} --- normally distributed with the given standard deviation
\item \code{unif(min=0, max=1)} --- uniformly distributed
\item \code{tdist(df=3, ncp=0)} --- t-distributed (long tails)
\item \code{roll(levels=1:6, weights=1)} --- generate samples from a vector
\item \code{each(tilde)} --- run the same instructions anew for each row
Also,
\item \code{seq()} --- sequence from 1 to nrow
\item \code{binom(input)} --- generates a 0/1 variable based on the magnitude of the input. Probability of 1 is a logistic transformation
of the input.
Use \code{sample()} to collect data from a DAG. Arguments: \verb{size=} and, optionally, \verb{seed=}
}
}
\examples{
one <- dag_make(x ~ exo(0.5), y ~ x + exo(0.5))
two <- dag_make(.genes ~ exo(), x ~ .genes + exo(), y ~ .genes + exo()))
three <- dag_make(x ~ c("a", "b", "c"), y ~ 2)) # e.g. for blocking
four <- dag_make(x ~ roll(c("a", "b", "c"))))
sample(one, size=5)
}
