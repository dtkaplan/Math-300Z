---
title: "Math 300R NTI Lesson `r (lesson <- 22)`"
subtitle: "DAGs, noise, and simulation"
author: "Prof. Danny Kaplan"
date: "`r format(Sys.time(), '%B %d, %Y')`"
output:
  html_document:
    theme: lumen
    toc: yes
    toc_float: yes
    css: NTI.css
  pdf_document:
    toc: yes
---


```{r setup, include=FALSE}
source("../_startup.R")
```

## Objectives

#. Implement on the computer a procedure to generate a sample, calculate a regression model, and produce a summary.

#. Iterate the procedure and collect the summaries across iterations. This collection is called the "sampling distribution."

#. Graphically display the distribution of summaries and generate a compact numerical description ("confidence interval") of the sampling distribution.



## Reading

TBD


## Lesson

In the lesson, establish

::: {.callout-tip icon=false}
## Setup

```{r message=FALSE, warning=FALSE}
library(mosaic)
library(dagsim)
```
:::


:::: {.callout-note icon=false}
## Example: A simple DAG

We'll work with a simple example: `dag01`

1. Give `dag01` as a command to view the DAG. Draw it as a diagram.

2. Based on `dag01`, what should be the coefficients on the regression model `y ~ x`.

3. Generate simulated data with `nrow=25` and find the regression coefficients.

```{r}
Sample <- sample(dag01, size=25)
lm(y ~ x, data = Sample) %>% coefficients()
```

Inference task: Given a report like the one above, say what the coefficient on `x` is likely to be in the underlying data generation mechanism.

::: {.callout-important icon=false}
## Activity
- How would you represent "is likely to be"?
- Take your best guess and report your representation. 
:::
::::


::: {.callout-note icon=false}
## Automating the procedure

In the previous example, we 

i. generated (simulated) data, 
ii. used it to build a regression model, 
iii. summarized it

To automate the procedure, put all the steps in one block of code, surrounded by curly braces.

```{r}
proc01 <- function() {
  lm(y ~ x, data = sample(dag01, size=25)) %>% coefficients()
}
proc01()
```

Now that the procedure is automated, we can see what happens if we carry out many trials:

```{r}
Trials <- do(100) * proc01()
```

::: {.callout-important icon=false}
## Activity: Simulating the sampling distribution

1. Generate the 100 trials. each involving a simple of size $n=25$ from `dag01`. The `x` column gives the regression coefficient on the simulation's `x` variable `x` for each of the 100 trials.

2. Summarize the `x` coefficient in the trials, graphically and numerically.

3. Compare the distribution of `x` in `Trials` to the corresponding coefficient in `dag01`.
:::

Question: How does the sampling distribution change if the sample size in each trial is changed to $n=100$ from $n=25$?





## Learning Challenges

:::: {.callout-note icon=false}
## LC 22.1 (**Obj 20.3**)

Consider these three data frames:

```{r}
One <- sample(dag01, size=25)
Two <- do(10) * {
  lm(y ~ x, data = sample(dag01, size=25)) %>%
    coefficients()
  }
Three <- Two %>% 
  summarize(mx = mean(x), sx = sd(x))
```

1. Both `One` and `Two` have columns called `x`, but they stand for different things. Explain what the unit of observation is and what the values in `x` represent..
2. `Three` does not have a column named `x`, but it is a summary of the `x` column from `Two`. What kind of summary.
::: {.callout-tip}
## Solution

1. In `One`, the `x` column contains the simulated of the `x` variable from `dag01`. The unit of observation is a single case, for instance a person for whom observations were made of `x` and `y`. The simulation involves generating 25 rows of data: one row for each of 25 people.
2. In `Two`, the `x` column is the regression coefficient on `x` from the simulation. Each row of `Two` corresponds to one trial in which regression is being performed on a sample of size 25 of simulated data from `dag01`. 
3. `Three` is a summary of the 10 trials in `Two`. The columns, named `mx` and `sx`, tell about the distribution of `x` across all the trials. 
:::
::::

## Documenting software

  * File creation date: `r Sys.Date()`
  * `r R.version.string`
  * `tidyverse` package version: `r packageVersion("tidyverse")`

