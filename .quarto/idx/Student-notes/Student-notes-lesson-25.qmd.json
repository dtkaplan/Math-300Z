{"title":"Math 300 Lesson 25 Notes","markdown":{"yaml":{"title":"Math 300 Lesson 25 Notes","subtitle":"Mechanics of prediction","author":"YOUR NAME HERE","date":"`r format(Sys.time(), '%B, %Y')`","output":{"pdf_document":{"toc":"yes"},"html_document":{"theme":"lumen","toc":"yes","toc_float":"yes"}}},"headingText":"math300::setup_student_notes()","containsRefs":false,"markdown":"\n\n```{r setup25, include=FALSE}\nlibrary(math300)\nlibrary(mosaic)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(math300)\n```\n\n## Overview\n\nUp until now, we have focused on model coefficients, confidence intervals, and effect sizes. These quantities are informative about the *relationship* between a response and one or more explanatory variables. \n\nNow we will focus on **prediction**, figuring out something that we don't yet know from measurements that we already have. Prediction is a task that is well suited to regression models. The major technical difference between modeling for prediction and modeling for describing or summarizing relationships is that, so far as prediction is concerned, the coefficients and their confidence intervals are not of direct interest. Instead, all we care about is how close the output from the regression model is to the quantity that we want to predict.\n\n\n### Reading\n\n[Lesson **25** from *LST*](https://dtkaplan.github.io/Math-300R/Textbook/Reading-notes-lesson-25.html)\n\n### Objectives\n\n25.1 Given a data frame, construct a predictor function for a specified response variable.\n\n25.2 Use the predictor function to estimate prediction error and summarize with root mean square (RMS) error. \n\n\n[Updated list of objectives](../Objectives/Obj-lesson-25.html)\n\n### Libraries\n\n```{r warning=FALSE,message=FALSE}\nlibrary(mosaic)\nlibrary(math300)\ndata(\"Galton\", package=\"mosaicData\")\ndata(\"Home_utilities\", package=\"mosaicCalc\")\n```\n\n----------\n\n## Lesson\n\nThe word \"predict\" in its everyday sense almost always refers to the future. To predict means to anticipate what the future will bring or, more realistically, which future outcomes are likely and which are not.\n\nIn data science, there is no necessary connection between \"prediction\" and the future. Instead, the prediction task is to find a way to convert between information that we have in hand and other information that we want but do not have. \n\nWe will not touch on the important problem of forecasting the future simply because the techniques for doing so, often listed under the name \"time series analysis,\" are built on different theoretical concepts that are outside the scope of these Lessons.\n\n### Exercise 25.1\n\nFor good reasons and bad, people are interested in the shape and proportions of their bodies. The `Anthro_F` data frame contains such *anthropometric* data for more than 200 college-aged women. It includes the familiar measurements such as `Height`, `Weight`, and `Biceps`,  as well as others (e.g. `Elbow`) that are relatively easy to make with a measuring tape. One of the measurements, however, is very difficult to make directly: fat as a percentage of body weight (`BFat`). \n\nWe're going to use `Anthro_F` to build a prediction model. The output will be `BFat`, the inputs will be any of the easy-to-measure quantities that you think appropriate.\n\n#### Task 1.1\n\n```{r}\nmodel3 <- lm(BFat ~ Weight * Height * Waist, data = Anthro_F)\n\n\ntiny_model <- lm(BFat ~ BMI, data = Anthro_F)\nstupid_model <- lm(BFat ~ Ankle, data = Anthro_F)\nlittle_model <- lm(BFat ~ Weight + Height + Waist, data = Anthro_F)\n\nbig_model <- lm(BFat ~ ., data=Anthro_F)\nbig_model %>% R2()\nTmp <- model_eval(big_model)\nmodel_cv(tiny_model, little_model, big_model, stupid_model)\n```\n\n#### Task 1.2\n\nUse `model_pe()` to simplify the task of prediction model.\n\n\n### Exercise 25.2\n\nContemporary data scientists often build predictive models using methods classed under the name \"**machine learning**.\" The \"learning\" in \"machine learning\" refers in part to an automated process of finding good explanatory variables for a model. Typically, this is accomplished by making many models of many different sorts and selecting those that have the lowest prediction error. \n\nA major problem in machine learning is \"**overfitting**,\" constructing highly complex models that are a good match to the data on which the model was trained, but don't continue to perform well when tested on new data.\n\nTo avoid overfitting, machine-learning models are evaluated not on how they perform on the training data, but on how they perform on \"out-of-sample\" data that were not included in the training data.\n\n#### TASK\n\nDivide into testing and training data\n\n```{r}\nLabeled <- Anthro_F %>% \n  mutate(testing = \n           ifelse(runif(nrow(.)) < 0.2, \"test\", \"train\"))\nTesting <- Labeled %>% filter(testing==\"test\")\nTraining <- Labeled %>% filter(testing==\"train\")\n```\n\nFit the model on the `Training` data. Then evaluate it on the `Training` data.\n\n```{r}\nmod <- lm(BFat ~ BMI*Height*Weight*Waist, data = Training)\nmodel_pe(mod)\nmodel_pe(mod, testdata=Testing)\n```\n\n\n\n\n#### TASK\n\n\n\nCross-validation. Use `model_cv()`.\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"pdf_document":{"toc":"yes"},"html_document":{"theme":"lumen","toc":"yes","toc_float":"yes"}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"include-in-header":["../mathjax-definitions.html"],"output-file":"Student-notes-lesson-25.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","theme":"cosmo","title":"Math 300 Lesson 25 Notes","subtitle":"Mechanics of prediction","author":"YOUR NAME HERE","date":"`r format(Sys.time(), '%B, %Y')`"},"extensions":{"book":{"multiFile":true}}}}}