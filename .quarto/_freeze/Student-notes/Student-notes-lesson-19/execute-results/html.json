{
  "hash": "6d9420035686e574f908a08cd44c130b",
  "result": {
    "markdown": "---\ntitle: \"Math 300 Lesson 19 Notes\"\nsubtitle: \"Topic: Statistical thinking\"\nauthor: \"YOUR NAME HERE\"\ndate: \"December, 2022\"\noutput:\n  html_document:\n    theme: lumen\n    toc: true\n  pdf_document:\n    toc: true\n---\n\n\n\n\n## Overview\n\nThus far in Math 300Z, we have learned about data frames and wrangling, several modes of visualization, regression models, and the basic interpretation of their coefficients. \n\nThe definition of \"statistical modeling\" given in the readings emphasizes \"accounting for variation.\" Regression models will be our primary tool for doing the accounting. In this Lesson we will connect more firmly visualization and modeling and practice with measuring the amount of variation in variables and the amount of variation in the response variable accounted for by a model.\n\n### Reading \n\n[Lesson **19** from *LST*](https://dtkaplan.github.io/Math-300R/Textbook/Reading-notes-lesson-19.html)\n\n\n\n### Objectives\n\n19.1 Use the *response vs. explanatory* (**RESPEX**) format for data graphics, employing jittering as appropriate. Display density distributions using a violin graphic.\n\n19.2 Use the *variance* to measure the amount of variation in a quantitative variable. \n    a. Convert a *variance* into the corresponding *standard deviation*. \n    b. Properly display a standard deviation on a RESPEX-format graph.\n\n19.3 Compute and the *residuals*. Display the model output on top of a RESPEX graph of the training data.\n\n19.4 Generate graphics and models using zero-one encoding of a categorical response variable. Interpret the output of such models.\n\n\n[Updated list of objectives](../Objectives/Obj-lesson-19.html)\n\n\n\n\n\n\n### Libraries \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mosaic)\nlibrary(math300)\ndata(\"amazon_books\", package=\"moderndive\")\n```\n:::\n\n\n---------\n\nSuggestion: *As you complete each task, add a `*` after the number in the task's section header. The editor's outline view can then help you navigate to asks that are not yet complete.\n\n### Task 0\n\nActivate the \"Outline\" view in the RStudio editor. Then, add a * after the number in the \"### Task 0\" header.\n\n---------\n\n\nLesson\n--------\n\n\n\nThe `moderndive::amazon_books` data frame records prices and other aspects of 325 books. We are going to explore some physical attributes of the books, weight, number of pages, thickness, and so on.\n\n### Exercise 1\n\nThe *thickness* varies from book to book. We are going to try to account for the thickness in terms of other physical quantities. (FYI: The variable `thick` is measured in inches.)\n\n#### Task 1.1\nMake a RESPEX graph suited to the model `thick ~ hard_paper`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot(amazon_books, aes(y=_______, x=______)) + \n#   geom_jitter(height=0, alpha=0.5)\n```\n:::\n\n\n\n### Exercise 2\n\nCopy your RESPEX commands into the following chunk and add a `geom_violin()` layer to display the distribution of thickness values for the two categories of book cover. The resulting display won't be very nice. We will improve it later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Copy the code from the previous chunk to get started.\n# Then add a geom_violin() layer. \n```\n:::\n\n\nThe point of the RESPEX format is to allow statistical annotations to be laid on top of the data **without hiding the data**. The default aesthetics of `geom_violin()` are not well selected to accomplish this task.\n\nThree of the parameters you can give to `geom_violin()` are `color=`, `fill=`, and `alpha=`.  The `alpha=` parameter controls the transparency: `alpha=0.5` means 50% transparency.\n\nThe `color=` and `fill=` can be set to values like \"blue\", \"orange\", etc. Another possible value is `NA`, which signals to suppress that part of the geom. \n\n#### Task 2.1\n\nUsing the next code chunk, set the `alpha=`, `color=`, and `fill=` to values of your preference, subject only to the constraint that the violin doesn't hide the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for task 1\n```\n:::\n\n\n#### Task 2.2\n\nCompare your choices in Task 1 to those made in the readings in (Figure 19.3](https://dtkaplan.github.io/Math-300R/Textbook/Reading-notes-lesson-19.html#fig-violin-intro). What do you prefer about your choices and what do you prefer in Figure 19.3?\n\n### Exercise 3\n\nCommon sense suggests that the thickness of a book depends on the number of pages. Let's investigate this numerically.\n\n#### Task 3.1 \n\nMake a RESPEX graph of `amazon_books` suitable for the model `thick ~ num_pages`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# For Task 1\n```\n:::\n\n\nThe next chunk trains a model with `thick ~ num_pages`, naming the result `mod1`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod1 <- lm(thick ~ num_pages, data=amazon_books)\n```\n:::\n\n\n#### Task 3.2\n\nExtract the `coef()` from `mod1`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for TASK 2\n```\n:::\n\n\n#### Task 3.4\n\nBased on the coefficients, say how thick a typical page is. (Remember the units!)\n\n*Your answer:*\n\n### Exercise 4\n\nFor your convenience, `model_plot()` function will graph the model as an annotation on top of a RESPEX display of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_plot(mod1, x=num_pages)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 3 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](Student-notes-lesson-19_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThe `model_eval()` function will turn input values for explanatory variables into the corresponding outputs. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_eval(mod1, num_pages=250)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  num_pages  .output      .lwr     .upr\n1       250 0.748944 0.3264018 1.171486\n```\n:::\n:::\n\n\n#### Task 4.1\nExplain in words how the above output for `num_pages=250 corresponds to the RESPEX graph of the model made just previously.\n\n*Your answer:*\n\n--------\n\nIf you use `model_eval()` *without* specifying values for the explanatory variables, `model_eval()` will use the *training data*, producing an output for each row in the training data. It will also calculate the residuals (and some other quantities that we will use in another Lesson).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOutput_for_training_data <- model_eval(mod1)\n```\n:::\n\n\n#### Task 4.2\nAdd to the above chunk the wrangling commands to compute the *variance* of each of these three columns: the `.response` variable, the model `.output`, and the residuals `.resid`. (Hint: `summarize()` and `var()`.)\n\n### Exercise 5\n\nLet's explore the idea that a book's cover type---hard-cover or paperback---reflects the number of pages in the book. \n\n#### Task 5.1 \n\nUse wrangling commands such as `group_by(hard_paper)` and `tally()` to figure out what fraction of the `amazon_books` are hard-cover? \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for Task 1\n```\n:::\n\n\n#### Task 5.2\nUse wrangling commands and `zero_one()`  to add a new variable `hardcover` to `amazon_books`. The value of the `hardcover` should be 1 when the book is hardcover. (Hints: You don't need `group_by()` for this task.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for Task 2\n```\n:::\n\n\n#### Task 5.3\n\nUse wrangling commands to find the mean of the `hardcover` variable that you made in Task 5.2. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# For task 3\namazon_books <- amazon_books %>% mutate(hardcover = zero_one(hard_paper, one=\"H\"))\namazon_books %>% summarize(mn = mean(hardcover))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 Ã— 1\n     mn\n  <dbl>\n1 0.274\n```\n:::\n:::\n\n\n\nHow does the result compare to the quantity you calculated in Task 1?\n\n*Your answer*:\n\n### Going further\n\nExplain what this plot shows, particularly the blue line.\n\n::: {.cell}\n\n```{.r .cell-code}\nmod2 <- lm(hardcover ~ num_pages, data=amazon_books)\nTmp <- model_eval(mod2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing training data as input to model_eval().\n```\n:::\n\n```{.r .cell-code}\nggplot(Tmp, aes(x = num_pages, y = .response)) +\n  geom_jitter(alpha=.5, height=0.2) +\n  geom_line(aes(y = .output), color=\"blue\")\n```\n\n::: {.cell-output-display}\n![](Student-notes-lesson-19_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n*Your answer here*:\n\n\n***\n\n## Documenting software \n\n  * File creation date: 2022-12-27\n  * R version 4.2.1 (2022-06-23)\n  \n\n",
    "supporting": [
      "Student-notes-lesson-19_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}