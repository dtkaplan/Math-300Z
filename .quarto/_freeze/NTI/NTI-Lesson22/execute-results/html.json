{
  "hash": "738253118242b3ee78d73a19a95354ff",
  "result": {
    "markdown": "---\ntitle: \"Math 300R NTI Lesson 22\"\nsubtitle: \"DAGs, noise, and simulation\"\nauthor: \"Prof. Danny Kaplan\"\ndate: \"December 23, 2022\"\noutput:\n  html_document:\n    theme: lumen\n    toc: yes\n    toc_float: yes\n    css: NTI.css\n  pdf_document:\n    toc: yes\n---\n\n\n\n\n## Objectives\n\n\n\n\n\n\n\n\n22.1 Implement on the computer a procedure to generate a sample, calculate a regression model, and produce a summary.\n\n22.2 Iterate the procedure and collect the summaries across iterations. This collection is called the \"sampling distribution.\"\n\n22.3 Graphically display the distribution of summaries and generate a compact numerical description of the sampling distribution.\n\n\n\n## Reading\n\n[Reading notes for Lesson 22](../Reading-notes/Reading-notes-lesson-22.qmd)\n\n\n## Lesson\n\nIt's important for the students to realize that sampling variation is about the summary of a sample. There are many ways to summarize a sample. To bring this point home, ask the students to suggest summaries of the sort of data generated by `dag01`. The textbook uses the coefficient on the model `y ~ 1`, but that is just because I want to emphasize the use of models. (The coefficient from `y ~ 1` will be the mean of `y`, but that's not the point to make here.) When you have a handful of measure types to use, create a \"summarize a sample\" command. For instance, here is a command to summarize in three ways: the mean, the median, and the variance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSample <- sample(dag01, size=10)\nSample %>%\n  summarize(m = mean(y), med = median(y), s = sd(y))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> m </th>\n   <th style=\"text-align:right;\"> med </th>\n   <th style=\"text-align:right;\"> s </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 4.260013 </td>\n   <td style=\"text-align:right;\"> 3.961958 </td>\n   <td style=\"text-align:right;\"> 1.923856 </td>\n  </tr>\n</tbody>\n</table>\n`````\n:::\n:::\n\n\nI've used the variable `y` in the above, but maybe someone will want to do the mean of `x` or the variance of `x*y`.\n\nThe above command could be written in one line, but I like to make clear that we are summarizing a sample, so I use the intermediate object `Sample` to hold the sample before summarizing. \n\nNow construct an set of trials:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTrials <- do(100) * {\n  Sample <- sample(dag01, size=10)\n  Sample %>%\n    summarize(m = mean(y), med = median(y), s = sd(y))\n}\n```\n:::\n\n\nShow the whole set of trials scrolling through the data frame `Trials`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(Trials)\n```\n:::\n\n\nAfter they have seen the whole set of trials, summarize it. Since we are interested in sampling variation, the summary of the trials will be the standard deviation of the measures we used to summarize each individual sample.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTrials %>%\n  summarize(sd(m), sd(med), sd(s))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> sd(m) </th>\n   <th style=\"text-align:right;\"> sd(med) </th>\n   <th style=\"text-align:right;\"> sd(s) </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 0.547772 </td>\n   <td style=\"text-align:right;\"> 0.6434104 </td>\n   <td style=\"text-align:right;\"> 0.4382252 </td>\n  </tr>\n</tbody>\n</table>\n`````\n:::\n:::\n\n\nThe remainder of the session should examine how the measure of sampling variation depends on each of two aspects of the simulation. \n\n- How many trials are used. (The results don't depend on this, but let the students find this out for themselves.)\n\n- The sample size. (Famously, the sampling variation will go as $1/\\sqrt{\\strut n}$. )\n\n## The \"standard error\"\n\n## The confidence interval\n\n\n## A possible cliff-hanger\n\nToward the end of the class, you might want to bring things back to real data. But let's be a little silly here. Pick some data frame of interest to the students and summarize it with model coefficients. I doubt that the `Hill_racing` data will be of much interest to students, but I'll write my illustration using it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(Hill_racing) %>%\n  lm(time ~ distance, data = .) %>%\n  coef()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept)    distance \n  -210.9137    381.0230 \n```\n:::\n:::\n\n\nAttentive students will howl at using `sample()` on a data frame rather than on a DAG. You can show them that the result of `sample()` is just to shuffle the order of the rows, and that the model coefficients don't depend on the order of the rows.\n\nThen construct the trials and the summary of the trials:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTrials <- do(10) * {\n  sample(Hill_racing) %>%\n    lm(time ~ distance, data = .) %>%\n    coef()\n}\nTrials %>%\n  summarize(sIntercept = sd(Intercept), sdistance = sd(distance))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> sIntercept </th>\n   <th style=\"text-align:right;\"> sdistance </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n</tbody>\n</table>\n`````\n:::\n:::\n\n\nBoth the standard deviations are zero. In Lesson 23 we'll see ways to measure the amount of inherited variability that makes it way to the summaries of a data frame.\n",
    "supporting": [
      "NTI-Lesson22_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}