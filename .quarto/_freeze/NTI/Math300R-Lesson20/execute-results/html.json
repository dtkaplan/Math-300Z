{
  "hash": "7bbe5e5da23a3b4bbdaa5cc61ed06997",
  "result": {
    "markdown": "---\ntitle: \"Math 300R NTI Lesson 20\"\nsubtitle: \"title goes here\"\nauthor: \"Prof. Danny Kaplan\"\ndate: \"October 14, 2022\"\noutput:\n  html_document:\n    theme: lumen\n    toc: yes\n    toc_float: yes\n    css: NTI.css\n  pdf_document:\n    toc: yes\n---\n\n\n\n\n## Objectives\n\n\n\n\n\n\n\n\n- 20.1. Understand that gaming is a way of improving our skills and identifying potential opportunities and problems. \n\n- 20.2 Characterize the \"size\" of a variable or of random noise using variance (or, equivalently, \"standard deviation\").\n\n- 20.3 Distinguish between a sample, a summary of a sample, and a sample of summaries of samples.\n\n\n## Reading\n\nTBD\n\n\n\n\n## Lesson\n\n::: {.callout-note icon=false}\n## Setup\n\nThe software for generating the simulations, and which contains a library of different scenarios, is in the package `{math300}`. The `{mosaic}` package contains functions for calculating statistics and **iteration**. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mosaic)\nlibrary(math300)\n```\n:::\n\n:::\n\n::: {.callout-tip icon=false}\n## Example\n1. Roll a die 1000 times. How often does each possible result appear?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSim <- dag_make(x ~ each(sample(1:6)))\nSamp <- sample(Sim, size=100)\nSamp %>% group_by(x) %>% summarize(count = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n      x count\n  <int> <int>\n1     1    17\n2     2    16\n3     3    17\n4     4    17\n5     5    17\n6     6    16\n```\n:::\n:::\n\n\n\n2. Generate 1000 rolls of the sum of two dice. How often does each possible result appear?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSim <- dag_make(x ~ each(sum(sample(1:6, 2, replace=TRUE))))\nSample <- sample(Sim, size=1000)\nSample %>%  \n  dplyr::group_by(x) %>%\n  summarize(frac = n()/nrow(.)) %>% \n  print.data.frame()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    x  frac\n1   2 0.025\n2   3 0.055\n3   4 0.082\n4   5 0.118\n5   6 0.155\n6   7 0.163\n7   8 0.139\n8   9 0.094\n9  10 0.081\n10 11 0.064\n11 12 0.024\n```\n:::\n:::\n\n\nQuestion: What do your results tell you about the possible results when summing 2 dice? \n\n3. Do the same but for summing 6 dice. \n\nQuestion: What do your results tell you about the possible results when summing 6 dice? Do the data show you that it is possible to get a result of 36?  \n\nThis illustrates something about \"inference\": the data do not always point you directly to the truth.\n\nQuestion: How would you modify the simulation to get a better handle on the truth. \n:::\n\n::: {.callout-note icon=false}\n## Measuring noise\nCreate a DAG where the X variable is simply noise: `eps()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSim <- dag_make(x ~ eps())\nSample <- sample(Sim, size=100)\nSample %>% summarize(sd(x), mean(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  `sd(x)` `mean(x)`\n    <dbl>     <dbl>\n1   0.999     0.155\n```\n:::\n:::\n\n\n- The argument to `eps()` sets the size of the noise. Confirm that this claim is true.\n:::\n\nSometimes we will want to repeat a simulation over and over again, collecting the results. Use `do()` for this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# one trial\nSim <- dag_make(x ~ eps())\nsample(Sim, size=100) %>% \n  summarize(sd(x), mean(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  `sd(x)` `mean(x)`\n    <dbl>     <dbl>\n1   0.934   -0.0728\n```\n:::\n\n```{.r .cell-code}\n# five trials\ndo(5) *\n  {sample(Sim, size=100) %>% \n  summarize(s = sd(x), m = mean(x))}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n      s       m  .row .index\n  <dbl>   <dbl> <int>  <dbl>\n1 0.921  0.0875     1      1\n2 1.13  -0.246      1      2\n3 1.06   0.0823     1      3\n4 0.960  0.0484     1      4\n5 0.868 -0.0587     1      5\n```\n:::\n:::\n\n\n- Not all the rows are the same. Why not?\n- None of the standard deviations are exactly 1. Does this mean the simulation is not working? \n\nA typical problem in statistical inference is to determine, from just one trial, whether the results are consistent or not with a proposed mechanism.\n\n## Learning Checks\n\n\n\n\n\n\n\n\n## 20.1\n\n@sec-size-of-variable describes two very closely related summary quantities used to measures of the \"size\" of a variable: i. the variance and ii. the \"standard deviation\" (which is the square root of the variance.\n\ni. Using software, what is the variance of the XXX variable in the YYY data frame? Make sure to include the *units*.\nii. What is the \"standard deviation\" of the XXX variable? Calculate this in two different ways: i. \"by-hand\" taking of the square root of the variance; ii. using the `sd()` software directly.\n\n[Repeat for a number of variables from different data frames.]\n\n### Solution\n\n\n\n----------\n\n\n\n## 20.2\n\n\n\n### Solution\n\n\n\n----------\n\n\n\n## Documenting software\n\n* File creation date: 2022-10-14\n* R version 4.2.1 (2022-06-23)\n* `tidyverse` package version: 1.3.2\n* `mosaic` package version: 1.8.4\n* `math300` package version: 0.1.0.9000\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}