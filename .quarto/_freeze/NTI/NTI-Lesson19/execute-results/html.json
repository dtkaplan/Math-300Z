{
  "hash": "00480a4d48c095e9279f720c19c92cf0",
  "result": {
    "markdown": "---\ntitle: \"Math 300R NTI Lesson 19\"\nsubtitle: \"Statistical thinking\"\nauthor: \"Prof. Danny Kaplan\"\ndate: \"December 23, 2022\"\noutput:\n  html_document:\n    theme: lumen\n    toc: yes\n    toc_float: yes\n    css: NTI.css\n  pdf_document:\n    toc: yes\n---\n\n\n\n\nIn the first half of the course, we examined *data wrangling* methods---`group_by()`, `summarize()` and `tally()` in particular---for summarizing variables and breaking up the summaries by groups. \n\nIn this second half of the course, we will be emphasizing the **relationships between variables**. The conceptual framework we've used for describing such relationships involves choosing a **response variable** and selecting one or more **explanatory variables**. Within this framework, you've already seen regression techniques for describing how a numerical response variable can be related to numerical explanatory variables. Something new you will see in the second half of the course is using regression techniques to handle *categorical* response variables. This will allow us to extend regression to cover such things as proportions and probabilities.\n\nGraphics can be a powerful way to perceive relationships between variables. In keeping with the response/explanatory framework, our go-to graphical technique will be to plot data as a \"**point plot**\" absolutely sticking to the convention that the response variable will be assigned to the *vertical axis*. Note that we'll use the term \"point plot\" rather than the \"scatter plot\" that was used in the early graphics chapters. That's partly because we're going to use the idea of \"scattering\" in a different way.\n\nWe're also going to adopt a new graphical convention: that statistical summaries should always be graphed as a layer on top of the raw data from which the summaries are derived. This means that we'll switch away from histograms as a way of displaying distributions. Why? Because the vertical axis on a histogram does not correspond to the values of a response variable. Similarly, barplots won't be appropriate, because the response variable in a barplot is represented by color rather than position on a vertical axis.\n\nOverall, both the graphical display of data and summaries and the calculation of numerical summaries like means and proportions will become much simpler to accomplish, since relationship summaries will be produced using using `lm()` and closely related model types. Data graphics will be made with `geom_point()` and closely related geoms.\n\n## Graphing data and statistical annotations\n\n\n\n\n## Categorical response variables\n\nTo get started, we'll work with categorical response variables that are \"**dicotomous**\" or, equivalently, \"**binomial**,\" that is, with only two methods. This covers a large fraction of the situations where categorical response values are needed. We'll leave those situations where there are lots of levels for the response variable to courses on \"machine learning,\" a topic we can only scratch the surface of in this introductory course.\n\nThe important insight into using categorical variables in regression models is encapsulated in the idea of the 0-1 (\"zero-one\") encoding. To illustrate, consider the `mosaicData::Whickham` data frame that records the age, smoking status, and survival of 1000 or so nurses in the UK. The relationship that motivated the collection of these data is between smoking and survival. Taking a few rows from the data frame let's us easily see the types of the variables involved:\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> outcome </th>\n   <th style=\"text-align:left;\"> smoker </th>\n   <th style=\"text-align:right;\"> age </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Dead </td>\n   <td style=\"text-align:left;\"> No </td>\n   <td style=\"text-align:right;\"> 56 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Alive </td>\n   <td style=\"text-align:left;\"> Yes </td>\n   <td style=\"text-align:right;\"> 54 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Alive </td>\n   <td style=\"text-align:left;\"> Yes </td>\n   <td style=\"text-align:right;\"> 21 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Dead </td>\n   <td style=\"text-align:left;\"> No </td>\n   <td style=\"text-align:right;\"> 72 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Alive </td>\n   <td style=\"text-align:left;\"> Yes </td>\n   <td style=\"text-align:right;\"> 30 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Alive </td>\n   <td style=\"text-align:left;\"> No </td>\n   <td style=\"text-align:right;\"> 19 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Alive </td>\n   <td style=\"text-align:left;\"> Yes </td>\n   <td style=\"text-align:right;\"> 46 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Alive </td>\n   <td style=\"text-align:left;\"> No </td>\n   <td style=\"text-align:right;\"> 31 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Alive </td>\n   <td style=\"text-align:left;\"> No </td>\n   <td style=\"text-align:right;\"> 74 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Alive </td>\n   <td style=\"text-align:left;\"> Yes </td>\n   <td style=\"text-align:right;\"> 32 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nHOW TO USE `math300::zero_one()`\n\nPlotting a zero-one response variable with correctly labelled axes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nP <- Whickham %>% \n  gf_jitter(zero_one(outcome) ~ age, color=~smoker, height=0.1, alpha=0.5) %>% \n  label_zero_one()\nP\n```\n\n::: {.cell-output-display}\n![](NTI-Lesson19_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nWe might equally well plot age as a function of outcome:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_jitter(age ~ outcome, data = Whickham, width=0.2) %>% gf_violin(color=NA, fill=\"blue\", alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](NTI-Lesson19_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nPLOT OUT A MODEL\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- model_train(zero_one(outcome) ~ age + smoker, data = Whickham)\n# fun <- mod_fun(mod) \n# P %>% mosaicCalc::slice_plot(fun(age, smoker=\"Yes\") ~ age, color=\"red\")\n```\n:::\n\n\n## Intervals\n\nOnce you have FIXES MOSAICMODEL, Generate a \"prediction\" interval and use gf_errorbar() to plot it over the model.\n\n## Objectives\n\n\n\n\n\n\n\n\n\n19.1 Use the *response vs. explanatory* (**RESPEX**) format for data graphics, employing jittering as appropriate. Display density distributions using a violin graphic.\n\n19.2 Use the *variance* to measure the amount of variation in a quantitative variable. \n    a. Convert a *variance* into the corresponding *standard deviation*. \n    b. Properly display a standard deviation on a RESPEX-format graph.\n\n19.3 Compute, interpret, and display the *fitted model values* and the *residuals*. \n\n::: {.callout-warning}\n## In DRAFT: \"Fitted model values\"\nMake sure this appears in the text. Also, RESPEX. \n:::\n\n19.4 Generate graphics and models using zero-one encoding of a categorical response variable. Interpret the output of such models.\n\n\n\n\n## Reading\n\nTBD\n\n\n## Lesson\n\n*This lesson marks the beginning of a new phase of the course. Thus far, we've worked with *techniques* for data wrangling, graphics, and regression modeling. Now we address the question of what a regression model (and other information that we might have) can tell us about the real world.*\n\n::: {.callout-tip icon=false}\n## Setup\n\n```r\nlibrary(mosaicData)\n```\n:::\n\n:::: {.callout-note icon=false}\n## Guided activity: House prices\n\n*Have students do the calculations for the first model, answering the questions that follow. After this is complete, have students do the calculations for the second model and answer those questions.*\n\nThe `mosaicData::SaratogaHouses` data frame contains information about the sales price and various attributes of about 1700 houses. (See `?SaratogaHouses` for a detailed description.)\n\nDo a regression of `price ~ bedrooms` and explain what the regression coefficients mean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(price ~ bedrooms, data=SaratogaHouses) |> coef()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept)    bedrooms \n   59862.96    48217.81 \n```\n:::\n:::\n\n\n1. What are the units of the intercept and of the `bedrooms` coefficient? *Intercept in dollars, `bedrooms` in dollars per bedroom.\n\n2. Interpret what the coefficients indicate about the price of houses and bedrooms. *Each additional bedroom adds about $50000 to the value of a house.*\n\n3. According to the model, predict what would be the sales price (at the time the data was collected, 2006) of a house with two bedrooms? *$59863 + 2\\times 48218$*\n\nOf course, bedrooms are not the only important thing about a house. Let's include `livingArea` along with `bedrooms` in the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(price ~ livingArea + bedrooms, data=SaratogaHouses) |> coef()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept)  livingArea    bedrooms \n  36667.895     125.405  -14196.769 \n```\n:::\n:::\n\n\n1. What are the units of the `livingArea` coefficient? *dollars per square foot*\n2. What does this model say about the value of adding a bedroom? *It seems to reduce the value of the house by about $15,000.*\n\nBased on exactly the same data, the two models seem to give contradictory statements about the value of an additional bedroom. \n\ni. Is one model right and the other wrong? If so, which one is right? (Explain your reasoning.) *Both models are mathematically correct. But they need to be interpreted in different ways. Each is telling us something different about the real world.*\nii. Could both models be right? If so, explain why the `bedroom` coefficients have opposite signs. *We will need to develop some additional tools and concepts before we can take on this question.*\n\nLearning how to interpret models in terms of what they say about the world is a major theme of this second half of Math 300. \n\nAnother, more technical question that we will address has to do with the *precision* of coefficients like 125.40 dollars per square foot. Might it actually be $200/ft^2^? How about $500/ft^2^? And how seriously should we take the sales value that we calculate by setting numbers for `bedrooms` and `livingArea` into the model?\n\n::::\n\n## Learning Checks\n\n\n\n\n\n\n\n## Setup\n\nThe `math300` package will be needed for lessons 20 through 39.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(math300)\nlibrary(moderndive)\nlibrary(NHANES)\n```\n:::\n\n\n1.  One of these pipeline commands will work and the other won't. Which one will work? Explain why the other one doesn't work.\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    lm(net ~ age, data = TenMileRace)\n    TenMileRace %>% lm(net ~ age)\n    ```\n    :::\n\n2.  An example from the *OpenIntro* book uses data on promotions. Some data wrangling commands that might be relevant are these:\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    promotions %>% tally()\n    ```\n    \n    ::: {.cell-output-display}\n    `````{=html}\n    <table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n     <thead>\n      <tr>\n       <th style=\"text-align:right;\"> n </th>\n      </tr>\n     </thead>\n    <tbody>\n      <tr>\n       <td style=\"text-align:right;\"> 48 </td>\n      </tr>\n    </tbody>\n    </table>\n    `````\n    :::\n    \n    ```{.r .cell-code}\n    promotions %>% group_by(decision) %>% tally()\n    ```\n    \n    ::: {.cell-output-display}\n    `````{=html}\n    <table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n     <thead>\n      <tr>\n       <th style=\"text-align:left;\"> decision </th>\n       <th style=\"text-align:right;\"> n </th>\n      </tr>\n     </thead>\n    <tbody>\n      <tr>\n       <td style=\"text-align:left;\"> not </td>\n       <td style=\"text-align:right;\"> 13 </td>\n      </tr>\n      <tr>\n       <td style=\"text-align:left;\"> promoted </td>\n       <td style=\"text-align:right;\"> 35 </td>\n      </tr>\n    </tbody>\n    </table>\n    `````\n    :::\n    \n    ```{.r .cell-code}\n    promotions %>% group_by(gender) %>% tally()\n    ```\n    \n    ::: {.cell-output-display}\n    `````{=html}\n    <table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n     <thead>\n      <tr>\n       <th style=\"text-align:left;\"> gender </th>\n       <th style=\"text-align:right;\"> n </th>\n      </tr>\n     </thead>\n    <tbody>\n      <tr>\n       <td style=\"text-align:left;\"> male </td>\n       <td style=\"text-align:right;\"> 24 </td>\n      </tr>\n      <tr>\n       <td style=\"text-align:left;\"> female </td>\n       <td style=\"text-align:right;\"> 24 </td>\n      </tr>\n    </tbody>\n    </table>\n    `````\n    :::\n    \n    ```{.r .cell-code}\n    promotions %>% group_by(gender, decision) %>% tally()\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    # A tibble: 4 × 3\n    # Groups:   gender [2]\n      gender decision     n\n      <fct>  <fct>    <int>\n    1 male   not          3\n    2 male   promoted    21\n    3 female not         10\n    4 female promoted    14\n    ```\n    :::\n    :::\n\nYou could use such wrangling to compare groups. For instance, you can use the results of the last command to calculate separately the proportion of males who were promoted and, similarly, the proportion of females.\n\na\\. **What are those proportions?**\n\nThe following wrangling command will calculate the proportions for you, but it is a bit complicated:\n\n::: {.cell}\n\n```{.r .cell-code}\npromotions %>%\n  group_by(gender) %>%\n  summarize(prop_promoted = sum(decision==\"promoted\") / n())\n```\n:::\n\nb\\. **Use the above command to check your calculations in (a).**\n\nc\\. In the regression paradigm, the comparison of proportions between the two groups is done directly in `lm()`, like this:\n\n::: {.cell}\n\n```{.r .cell-code}\npromotions %>%\n  mutate(promoted = zero_one(decision, one=\"promoted\")) %>%\n  lm(promoted ~ gender, data = .) %>%\n  coef()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept) genderfemale \n   0.8750000   -0.2916667 \n```\n:::\n:::\n\nWe'll explain the purpose of `zero_one()` in Lesson 19, but putting that matter aside for a moment, compare the two coefficients in the regression model to the proportion results you got from wrangling.\n\ni.  **What does the value of the intercept coefficient correspond to in the wrangling results?**\n\nii. **What does the `genderfemale` coefficient correspond to in the wrangling results?** (Hint: you will have to do a bit of arithmetic on the wrangling results.)\n\n\n\n\n\n## 19.1\n\nConsider the `moderndive::evals` data that records students' evaluations (`score`, on a 1-5 scale) of the professors in each of several courses (the course `ID`), as well as the `age`, \"average beauty rating\" (`bty_avg`) of the professor, enrollment in the course (`cls_students`) and the level o the course (`cls_level`). Each row in the data frame is an individual course section.\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> ID </th>\n   <th style=\"text-align:right;\"> score </th>\n   <th style=\"text-align:right;\"> age </th>\n   <th style=\"text-align:right;\"> bty_avg </th>\n   <th style=\"text-align:right;\"> cls_students </th>\n   <th style=\"text-align:left;\"> cls_level </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 329 </td>\n   <td style=\"text-align:right;\"> 2.7 </td>\n   <td style=\"text-align:right;\"> 64 </td>\n   <td style=\"text-align:right;\"> 2.333 </td>\n   <td style=\"text-align:right;\"> 22 </td>\n   <td style=\"text-align:left;\"> upper </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 313 </td>\n   <td style=\"text-align:right;\"> 4.2 </td>\n   <td style=\"text-align:right;\"> 42 </td>\n   <td style=\"text-align:right;\"> 2.667 </td>\n   <td style=\"text-align:right;\"> 86 </td>\n   <td style=\"text-align:left;\"> upper </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 430 </td>\n   <td style=\"text-align:right;\"> 4.5 </td>\n   <td style=\"text-align:right;\"> 33 </td>\n   <td style=\"text-align:right;\"> 5.833 </td>\n   <td style=\"text-align:right;\"> 120 </td>\n   <td style=\"text-align:left;\"> lower </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 95 </td>\n   <td style=\"text-align:right;\"> 4.2 </td>\n   <td style=\"text-align:right;\"> 48 </td>\n   <td style=\"text-align:right;\"> 4.333 </td>\n   <td style=\"text-align:right;\"> 33 </td>\n   <td style=\"text-align:left;\"> upper </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 209 </td>\n   <td style=\"text-align:right;\"> 4.8 </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 3.667 </td>\n   <td style=\"text-align:right;\"> 34 </td>\n   <td style=\"text-align:left;\"> upper </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 442 </td>\n   <td style=\"text-align:right;\"> 3.6 </td>\n   <td style=\"text-align:right;\"> 61 </td>\n   <td style=\"text-align:right;\"> 3.333 </td>\n   <td style=\"text-align:right;\"> 39 </td>\n   <td style=\"text-align:left;\"> lower </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 351 </td>\n   <td style=\"text-align:right;\"> 4.6 </td>\n   <td style=\"text-align:right;\"> 50 </td>\n   <td style=\"text-align:right;\"> 3.333 </td>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:left;\"> lower </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 317 </td>\n   <td style=\"text-align:right;\"> 3.7 </td>\n   <td style=\"text-align:right;\"> 52 </td>\n   <td style=\"text-align:right;\"> 6.500 </td>\n   <td style=\"text-align:right;\"> 44 </td>\n   <td style=\"text-align:left;\"> upper </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 444 </td>\n   <td style=\"text-align:right;\"> 4.1 </td>\n   <td style=\"text-align:right;\"> 52 </td>\n   <td style=\"text-align:right;\"> 4.500 </td>\n   <td style=\"text-align:right;\"> 111 </td>\n   <td style=\"text-align:left;\"> lower </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 315 </td>\n   <td style=\"text-align:right;\"> 3.8 </td>\n   <td style=\"text-align:right;\"> 52 </td>\n   <td style=\"text-align:right;\"> 6.000 </td>\n   <td style=\"text-align:right;\"> 88 </td>\n   <td style=\"text-align:left;\"> upper </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\nThe following commands model `score` versus `age` and plots the data as a point plot.\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(score ~ age, data = moderndive::evals) %>% coef()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n (Intercept)          age \n 4.461932354 -0.005938225 \n```\n:::\n\n```{.r .cell-code}\nopenintro::evals %>% gf_point(score ~ age, alpha=0.2 )\n```\n\n::: {.cell-output-display}\n![](NTI-Lesson19_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n1. Explain why some of the dots are darker than others?\n\n::: {.callout-note}\n## Solution\n\nAll the ages have integer values---e.g., 43, 44, 45---so the dots line up in vertical lines.\n\nSimilarly, the scores have values only to one decimal place---e.g., 3.1, 3.2, 3.3---so the dots line up in horizontal lines. If there are two or more rows in `evals` that have the same age and score, the dots will be plotted over one another. Since transparency (`alpha = 0.2`) is being used, points where there is a lot of overplotting will appear darker.\n:::\n\n2. Remake the plot, but using `gf_jitter()` instead of `gf_point()`. Explain what's different about the jittered plot. (Hint: Almost all of the dots are the same lightness.)\n\n::: {.callout-note}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nopenintro::evals %>% gf_jitter(score ~ age, alpha=0.2 )\n```\n\n::: {.cell-output-display}\n![](NTI-Lesson19_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\"Jittering\" means to shift each dot by a small random amount. This reduces the number of instances where dots are overplotted.\n:::\n\n3. Now make a jitter plot of score versus class level (`cls_level`).\n    a. What do the tick-mark labels on the horizontal axis describe? Are they numerical?\n    b. To judge from the plot, are their more lower-level than upper-level courses? Explain briefly what graphical feature lets you answer this question at a glance.\n\n::: {.callout-note}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nopenintro::evals %>% gf_jitter(score ~ cls_level)\n```\n\n::: {.cell-output-display}\n![](NTI-Lesson19_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\na. The tick-mark labels are the levels of the categorical variable `cls_level`. The are words, not numbers.\nb. There are many more dots in the right column than in the left. Since `lower` level class are shown in the left column, there are fewer lower-level courses than upper-level courses. \n:::\n\n4. The two columns of points in the plot you made in (3) are not separated by very much empty space. You can fix this by giving `gf_jitter()` an argument `width=0.2`. Try different numerical values for `width` and report which one you find most effective at making the two columns clearly separated while avoiding overplotting.\n\n5. Are the scores, on average, different for the lower- vs upper-level classes? It's hard to get more than a rough idea of the distribution of scores by looking at the \"density\" of points. The reason is that the number of points differs in the two columns. But there is an easy fix: add a layer to the graphic that shows the distribution (more or less like a histogram displays a distribution of values). You can do this by piping the jitter plot layer into a geom called a \"violin,\" like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nopenintro::evals %>% \n  gf_jitter(score ~ cls_level) %>%\n  gf_violin(fill=\"blue\", alpha=0.2, color=NA)\n```\n\n::: {.cell-output-display}\n![](NTI-Lesson19_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\nExplain how to read the violins.\n\n--------\n\n## 19.2\n\nThe `openintro::promotions` data comes the the 1970s and records the gender of 38 people along with the result of a decision to promote (or not) the person. =\n\nChapter 2 of ModernDive suggests graphically depicting `decision` versus `gender` by using a bar plot. There are two ways to make the bar plot, depending on which variable you assign to the horizontal axis and which to the fill color.\n\n::: {.cell}\n\n```{.r .cell-code}\npromotions %>% gf_bar(~ decision, fill=~ gender)\npromotions %>% gf_bar(~ gender, fill=~decision)\n```\n\n::: {.cell-output-display}\n![Two different ways to plot promotion outcome and gender](NTI-Lesson19_files/figure-html/fig-promotion-bars-1.png){#fig-promotion-bars-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Two different ways to plot promotion outcome and gender](NTI-Lesson19_files/figure-html/fig-promotion-bars-2.png){#fig-promotion-bars-2 width=672}\n:::\n:::\n\nPlots like those in @fig-promotion-bars might be attractive or not, depending on your taste. What they don't accomplish is to make sure which is the response variable and which the explanatory variable.\n\nThe choice of response and explanatory variables depends, of course, on what you are trying to display. But everyday English gives a big hint. For instance, you might describe the question at hand as, \"Does gender affect promotion decisions.\" Here, the variable doing the affecting is `gender`, and the outcome is the `decision`.\n\nModeling decision as a function of gender is easy once you convert the response variable to a zero-one variable. Like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- lm(zero_one(decision, one=\"promoted\") ~ gender, data = promotions)\ncoefficients(mod)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:right;\"> coefficient </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:right;\"> 0.8750000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> genderfemale </td>\n   <td style=\"text-align:right;\"> -0.2916667 </td>\n  </tr>\n</tbody>\n</table>\n`````\n:::\n\n```{.r .cell-code}\nmosaicModel::mod_eval(mod)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> gender </th>\n   <th style=\"text-align:right;\"> model_output </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> male </td>\n   <td style=\"text-align:right;\"> 0.8750000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> female </td>\n   <td style=\"text-align:right;\"> 0.5833333 </td>\n  </tr>\n</tbody>\n</table>\n`````\n:::\n:::\n\n1. Explain what is the relationship between the model coefficients and the model outputs.\n\n::: {.callout-note}\n## Solution\n\nThe coefficients tell how to calculate the model output. These coefficients say that the model output will be 0.875, but subtract 0.292 if the person is female.\n\nThe model outputs give the probability of being promoted for each of the two genders.\n:::\n\n2. Make this plot and explain what the red lines show. (We don't expect you to be able to write the command to generate such plots on your own, but we do expect you to be able to interpret them.)\n\n::: {.cell}\n\n```{.r .cell-code}\npromotions %>% \n  gf_jitter(zero_one(decision) ~ gender, height=0.2, width=0.2) %>%\n  gf_errorbar(model_output + model_output ~ gender, data=mod_eval(mod), \n              color=\"red\", inherit=FALSE) %>%\n  label_zero_one()\n```\n:::\n\n::: {.callout-note}\n## Solution\n\nThe red lines show the proportion of the people in each gender group who were promoted. The y-axis scale on the left refers to the zero-one encoding of `decision`, while the y-axis labels on the right make it easier to read off the numerical value of the proportion.\n:::\n\n--------\n\n## 19.3\n\nThe `mosaicData::Whickham` data from comes from a survey of a thousand or so nurses in the UK in the 1970s. The data record the `age` of each nurse along with whether the nurse was still alive in a follow-up survey 20 years later (`outcome`).\n\nMake this graph from the `Whickham` data:\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_jitter(zero_one(outcome) ~ age, data = Whickham, alpha=0.3, height=0.1) %>% \n  label_zero_one() \n```\n\n::: {.cell-output-display}\n![](NTI-Lesson19_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n1. Explain in everyday language what the graph shows about the lives of humans.\n\n2. Make the graph again, but leave out the `%>% label_zero_one()`. Then explain what `label_zero_one()` does.\n\n::: {.callout-note}\n## Solution\n\n1. The graph shows that young nurses tended to be alive at the 20-year follow-up, older nurses not so much.\n\n2. `%>% label_zero_one()` adds an axis on the left of the graph showing that in the zero-one tranform of `outcome`, \"Alive\" is assigned the value 1 and \"Dead\" the value 0.\n:::\n\n### Solution\n\n--------\n\n## 19.4\n\nAbout the summarization of models. Pipe the model fit into any of four functions:\n\ni. `%>% coef()`\nii. `%>% regression_summary()`\niii. `%>% rsquared()`\niv. `%>% confint()`\n\nREDO `confint()` so that the columns are named `lower`, `middle`, `upper`\n\n### Solution\n\n\n--------\n\n## 19.5 (Obj. 19.3)\n\nCalculation of a 95% coverage interval (or any other percent level interval) is straightforward with the right software. To illustrate, consider the efficiency of cars and light trucks in terms of CO_2 emissions per mile driven. We'll use the `CO2city` variable in the `math300::MPG` data frame. The basic calculation using the `mosaic` package is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_stats( ~ CO2city, data = math300::MPG, coverage(0.95))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> response </th>\n   <th style=\"text-align:right;\"> lower </th>\n   <th style=\"text-align:right;\"> upper </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> CO2city </td>\n   <td style=\"text-align:right;\"> 276.475 </td>\n   <td style=\"text-align:right;\"> 684.525 </td>\n  </tr>\n</tbody>\n</table>\n`````\n:::\n:::\n\nThe following figure shows a violin plot of `CO2city` which has been annotated with various coverage intervals. Use the calculation above to identify which of the intervals corresponds to which coverage level.\n\n1. 50% coverage interval -A- (c)\n2. 75% coverage interval -A- (e)\n3. 90% coverage interval -A- (g)\n4. 100% coverage interval -A- (i). This extends from the min to the max, so you could have figured this out just from the figure.\n\n::: {.cell}\n::: {.cell-output-display}\n![](NTI-Lesson19_files/figure-html/kangaroo-freeze-candy-2-1.png){width=672}\n:::\n:::\n\n\n--------\n\n## 19.6 (Obj 19.3)\n\nThe two jitter + violin graphs below show the distribution of two  different variables, X and Y. Which variable has more variability?\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](NTI-Lesson19_files/figure-html/goat-take-linen-1-1.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](NTI-Lesson19_files/figure-html/goat-take-linen-1-2.png){width=50%}\n:::\n:::\n\n::: {.callout-note}\n## Solution\n\nThere is about  the same level of variability in variable A and variable B. This surprises some people. Remember, the amount of variability has to do with the spread of *values* of the variable. In variable B, those values are have a 95% prediction interval of about 30 to 65,  about the same as for variable A. There are two things about plot (b) that  suggest to many people that there is more variability in  variable B. \n\n1. The larger horizontal spread of the dots. Note that variable B is shown along the vertical axis. The horizontal spread imposed by  jittering is completely arbitrary: the only values that count are on the y axis.  \n2.  The  scalloped, irregular edges of the violin plot. \n\nOn the other hand, some people look at the clustering of the data points in graph (b) into several discrete values, creating empty spaces in between. To them, this clustering implies less variability. And, in a way, it does. But the *statistical* meaning of variability has to do with  the overall spread of the  points, not whether they are restricted to discrete values.   \n\n:::\n\n--------\n\n## 19.7 (Objs. 19.3 & 19.4)\n\nThe graphs below show a violin plot of body mass index (BMI) for adults and children. One of the graphs shows a correct 95% coverage interval on BMI, the other does not.\n\nIdentify the incorrect graph and say what feature of the graph led to your answer.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](NTI-Lesson19_files/figure-html/goat-hurt-painting-1-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](NTI-Lesson19_files/figure-html/goat-hurt-painting-1-2.png){width=672}\n:::\n:::\n\n::: {.callout-note}\n## Solution\nGraph (b) is correct. In graph (a), you can see that the interval fails to include a lot of the low BMI children and extends too high. For adults, the graph (a) interval extends too far low and doesn't go high enough.\n:::\n\n--------\n\n## 19.E\n\nThere are two equivalent formats describing an interval numerically that are widely used:\n\ni. Specify the lower and upper endpoints of the interval, e.g. 7 to 13.\nii. Specify  the center and half-width of the interval, e.g. 10 ± 3, which is  just the same as 7 to 13.\n\nComplete the following table to show the equivalences between the two notations.\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Interval </th>\n   <th style=\"text-align:left;\"> bottom-to-top </th>\n   <th style=\"text-align:left;\"> plus-or-minus </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> (a) </td>\n   <td style=\"text-align:left;\"> 3 to 11 </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> (b) </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> 108 ± 10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> (c) </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> 30 ± 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> (d) </td>\n   <td style=\"text-align:left;\"> 97 to  100 </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> (e) </td>\n   <td style=\"text-align:left;\"> -4 to  16 </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.callout-note}\n## Solution\n\na. 7 ± 4\nb. 98 to 118\nc. 29 to 31\nd. 98.5 ± 1.5\ne. 6 ± 10\n\nIt's a matter of judgement which format to use. The bottom-to-top notation highlights the range of the interval  while the plus-or-minus notation emphasizes the center of the interval. As a rule of thumb, I suggest this:\n\n* If the first two digits are different between the top and bottom of the interval, use the bottom-to-top notation. So,  write 387 to 393.  If the first two digits are the same, use plus-or-minus. For instancer, the ratio of the mass of the Earth to that of the Moon is 81.3005678 ± 0.0000027. This is easier to take in at a glance than the equivalent 81.3005651 - 81.3005708\n\n:::\n\n--------\n\n## 19.F\n\n::: {.callout-warning}\n## Still in draft\n\nSuppose there are other explanatory variables to be displayed. In that case, we will use color and faceting. If there are *no* explanatory variables, as in `y ~ 1`, we will jitter the data horizontally to avoid overplotting.]\n:::\n\n\n--------\n\n## Demonstration: Predicting calorie content\n\nStarbucks is a famous coffee-shop franchise with more than 30,000 branches (as of 2021). People go to Starbucks for coffee, but they often buy something to eat as well. In this demonstration, we will look at the calorie content of Starbucks' food offerings. As always, when conducting a statistical analysis, it is helpful to have in mind the motivation for the task. So we will imagine, tongue in cheek, that we want to make food recommendations for the calorie-conscious consumer.\n\nFirst, a **point summary** of the calories in the different types of food products available at Starbucks:\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_stats(calories ~ type, \n         data = openintro::starbucks, mean)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> response </th>\n   <th style=\"text-align:left;\"> type </th>\n   <th style=\"text-align:right;\"> mean </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> calories </td>\n   <td style=\"text-align:left;\"> bakery </td>\n   <td style=\"text-align:right;\"> 368.7805 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> calories </td>\n   <td style=\"text-align:left;\"> bistro box </td>\n   <td style=\"text-align:right;\"> 377.5000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> calories </td>\n   <td style=\"text-align:left;\"> hot breakfast </td>\n   <td style=\"text-align:right;\"> 325.0000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> calories </td>\n   <td style=\"text-align:left;\"> parfait </td>\n   <td style=\"text-align:right;\"> 300.0000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> calories </td>\n   <td style=\"text-align:left;\"> petite </td>\n   <td style=\"text-align:right;\"> 177.7778 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> calories </td>\n   <td style=\"text-align:left;\"> salad </td>\n   <td style=\"text-align:right;\"> 80.0000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> calories </td>\n   <td style=\"text-align:left;\"> sandwich </td>\n   <td style=\"text-align:right;\"> 395.7143 </td>\n  </tr>\n</tbody>\n</table>\n`````\n:::\n:::\n\nThis summary supports the sensible advice to choose salads or smaller portions (type \"petite\") to avoid calories. One might go further, for example, concluding that a sandwich is a poor choice (in terms of calorie content), so lean toward parfaits or hot breakfasts. We can even imagine someone concluding from this summary that a bistro box is a better calorie-conscious choice than a sandwich.\n\n@fig-starbucks-food shows the point summary, using the raw data to put things in context.\n\n::: {.cell .fig-cap-location-margin}\n\n```{.r .cell-code  code-fold=\"true\"}\nopenintro::starbucks %>% \n  ggplot(aes(x=type, y=calories)) +\n  geom_jitter(width=0.2, alpha=0.5) +\n  geom_errorbar(data=point_summary, aes(ymin=mean, ymax=mean), \n                y=NA, color=\"blue\") +\n  geom_point(data=point_summary, aes(y=mean), color=\"red\")\n```\n\n::: {.cell-output-display}\n![Calories of the various food items sold by Starbucks, annotated with point and interval summaries.](NTI-Lesson19_files/figure-html/fig-starbucks-food-1.png){#fig-starbucks-food width=672}\n:::\n:::\n\nPlotting the point summary in the context of the raw data shows at a glance that the point summary is not of any genuine use. For instance, using the point summary without the data, we might conclude that hot breakfasts are better than sandwiches. However, the data display suggests otherwise; there is just one low-calorie breakfast. The others are much like sandwiches.\n\nA point summary is compact but cannot represent the *variation* within each food type. An interval summary, as in @fig-starbucks-food2, does show this variation. \n\n::: {.cell .fig-cap-location-margin}\n\n```{.r .cell-code  code-fold=\"true\"}\nopenintro::starbucks %>% \n  ggplot(aes(x=type, y=calories)) +\n  geom_jitter(width=0.2, alpha=0.5) +\n  geom_errorbar(data=point_summary, aes(ymin=mean, ymax=mean), \n                y=NA, color=\"blue\") \n```\n\n::: {.cell-output-display}\n![Calories of the various food items sold by Starbucks, annotated with point and interval summaries.](NTI-Lesson19_files/figure-html/fig-starbucks-food2-1.png){#fig-starbucks-food2 width=672}\n:::\n:::\n\nUnlike point summaries, interval summaries can overlap. Such overlap indicates that the groups are not all that different. Here, the interval summary indicates an appropriate conclusion; \"Don't make your diet choices based on food type. Look at the calorie content of individual items before choosing.\"\n\nAdmittedly, in this simple setting the data themselves would lead to the conclusion. However, as we move into more complicated settings, it will become infeasible to see patterns quickly straight from the data. \n\n\n\n\n\n\n\n\n\n\n\n\n\n## Documenting software\n\n  * File creation date: 2022-12-23\n  * R version 4.2.1 (2022-06-23)\n  * `tidyverse` package version: 1.3.2\n\n\n::: {.callout-note}\n## Violins versus boxes\n\nAll of the graphical statistical annotations are human inventions. Each invention attempts to meet a need, but usually, the invention is a compromise between the statistical objective and the computational and graphical resources available. The **box plot** format is a case in point. The statistical goal of a box plot is to display the distribution of values of a variable. It was invented in a time when graphics were mostly drawn by hand and computers were not widely available. The computations behind a box plot produce a five-number summary: min, first quartile, median, third quartile, max. It's straightforward (but tedious!) to do these by hand since they are based on sorting and counting. The drawing itself uses only straight lines, which are easy to draw by hand with only a pencil and a straightedge.\n\n:::: {.content-visible when-format=\"pdf\"}\n\n\\includegraphics[width=0.3\\columnwidth]{www/cigar-box-guitar.png} A cigar-box guitar\n\n::::\n\n:::: {.column-margin .content-visible when-format=\"html\"}\n![](www/cigar-box-guitar.png)\n\nA cigar-box guitar\n\n::::\n\n\nA violin plot requires hundreds or thousands of evaluations of the gaussian function along with post-processing. They are not feasible for a human; a computer is required. Similarly, drawing the detailed shape of the violin (@fig-violin-intro) requires a computer. \n\nThe box plot has important deficiencies. It is appropriate only for uni-modal distributions and doesn't give even a hint of possible bi-modality. The sharp boundaries of the box and endpoints of the whiskers suggest that even smooth density shapes have abrupt transitions. Points are marked as \"outliers\" in order to keep the whiskers from becoming absurdly long, but box plots of data with a normal (gaussian) distribution will produce such \"outliers\" whenever the sample size is large. \n\nWhen it comes to computing power, we are today unimaginably rich compared to the generation that introduced box plots. In a sense, we are so rich we can use expensive, well made products such as a violin. The box-plot generation was living in computational poverty. Not having the (computational) funds to buy a violin, they had to make do with primitive instruments they had to make do with the materials at hand, just as early blues mucisians, coming out of poverty, often had to build instruments such as a cigar-box guitar. \n:::\n",
    "supporting": [
      "NTI-Lesson19_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}