{
  "hash": "023af6ec7c5bde5a7891af692c5ce913",
  "result": {
    "markdown": "---\ntitle: \"Learning Checks Lesson 20\"\n---\n\n\n\n\n::: {.callout-warning}\n## Only for use in drafting questions\n20.1. Understand that gaming is a way of improving our skills and identifying potential opportunities and problems. \n\n20.2 Characterize the \"size\" of a variable or of random noise using variance (or, equivalently, \"standard deviation\").\n\n20.3 Distinguish between a sample, a summary of a sample, and a sample of summaries of samples.\n\n:::\n\n--------\n\n## 20.A\n\nYou're having a conversation about your statistics course with your engineer aunt at Thanksgiving. You tell her about how the course uses gaming (e.g. simulated data from DAGs) to develop an understanding of statistical methodology. She says (sensibly), \"What? Simulated data? Isn't statistics supposed to be about real data? It's not a game.\"\n\n1. Write a paragraph-long response to your aunt explaining the point of gaming in learning statistics. Your paragraph should make a compelling case for gaming.\n\n2. Write another paragraph that expresses any concerns you have about using games in a course that's supposed to be about methods for extracting information about the world from real data.\n\n--------\n\n## 20.B\n\nWrite statements using the computer commands covered in the first half of the course to calculate the **size** of the variability of these quantities:\n\n1. The `age` variable from the `Cherry_race_longitudinal` data frame.\n\n2. The `Height` variable from the `NHANES` data frame.\n\n3. Compute the body-mass index from the formula $\\text{BMI} = \\frac{w^2}/h$ where $w$ is the person's weight and $h$ is the person's height. Then calculate the **size** of the variability of the BMI you calculate from the `NHANES` data.\n\n--------\n\n## 20.C\n\n::: {.callout-warning}\n## In draft\n\nShow pictures of data together with violins. Ask students to estimate the \"size\" of the variation and to mark on the graph an annotation reflecting the \"size.\" \n\nIs \"size\" a single number or a pair of numbers?\n\nContrast \"size\" with the coverage interval: why is one of them two numbers and the other just a single number. \n:::\n\n--------\n\n## 20.1\n\n@sec-size-of-variable (in the reading for this variable) describes two very closely related summary quantities used to measures of the \"size\" of a variable: a) the variance and b) the \"standard deviation\" (which is the square root of the variance).\n\ni. Using software, what is the variance of the XXX variable in the YYY data frame? Make sure to include the *units*.\nii. What is the \"standard deviation\" of the XXX variable? Calculate this in two different ways: i. \"by-hand\" taking of the square root of the variance; ii. using the `sd()` software directly.\n\n[Repeat for a number of variables from different data frames.]\n\n::: {.callout-note}\n## Solution\n\n:::\n\n---------\n\n## 20.D\n\n::: {.callout-warning}\n## In draft\n\nIn arithmetic notation, parentheses are used to group operations. So, $4*(3+2)$ is different from $4*3 + 2$. With `do()`, a similar logic applies, but we use curly braces---not parentheses---for the grouping. Another difference is that with `do()` and summarization, some configurations may not work at all because using braces or not will produce different data frames with different names.\n\n\n1. Try the following two commands, which differ in how curly braces are used.\n\n```r\ndo(5) * {sample(Galton, size=50)} %>% summarize(m = mean(height))\ndo(5) * {sample(Galton, size=50) %>% summarize(m = mean(height))}\n```\n\nOne command produces an error message and the other doesn't. Explain what's wrong with the erroneous command.\n\n2. Try these two statements. Again, one will work and the other won't. Diagnose the \n\n\n::: {.cell}\n\n```{.r .cell-code}\n{ do(5) * {sample(Galton, size=50) %>% summarize(m = mean(height))} } %>% summarize(sz=sd(m))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         sz\n1 0.7345861\n```\n:::\n\n```{.r .cell-code}\ndo(5) * {sample(Galton, size=50) %>% summarize(m = mean(height))} %>% summarize(sz = sd(m))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  sz\n1 NA\n2 NA\n3 NA\n4 NA\n5 NA\n```\n:::\n:::\n\n\n:::\n\n----------\n\n## 20.E\n\nWrite single-line computer statements that will do the following (related) tasks:\n\n1. Draw a sample of size 5 from the `mosaicData::TenMileRace` data\n\n2. Draw a sample (but now of size 100) and compute the \"size\" of variation of the `net` variable (which gives the net time to complete the race, start line to finish line).\n\n3. Carry out 300 trials of (2) using the `do()` operator. (The result should be a data frame with entries that vary.) Note: Surround the statement for a single trial with curly braces: `{` and `}`. Also, arrange for the name of the column in the overall result to be `sz`. This will appear in the `summarize()` command.\n\n\n4. Add on to (3) the computations needed to calculate the mean and the standard deviation of the trials? Note: Surround the statement from (3) with a pair of curly braces so that the `summarize()` command will look at all 300 trials as a single data frame.\n\n    i. Is the mean thus calculated a single number comprising all trials or a number for each trial? Briefly justify your answer in terms of what the mean of the trials should be about.\n    \n    ii. Eexplain what the standard deviation of the trials captures and why it's different from the standard deviation on one trial (as from (2)).\n    \n5. Repeat (4), but now with a sample size of 400 instead of 100. With the larger sample size, how do the mean and the standard deviation compare to what you got with a sample size of 100.\n\n6. Repeat (4) but this time use 1200 trials instead of 300. With more trials, how do the mean and standard deviation compare to what you got with 300 trials?\n    \n::: {.callout-note}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sample of size 100 from TenMileRace\nsample(TenMileRace, size=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     state time  net age sex orig.id\n5524    VA 6884 6403  27   F    5524\n6142    DC 6263 6040  30   F    6142\n8067    VA 5260 4985  46   F    8067\n5228    DC 6101 5905  26   F    5228\n3996    VA 6310 6075  57   M    3996\n```\n:::\n\n```{.r .cell-code}\nsample(TenMileRace, size=100) %>% summarize(sz = sd(net))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        sz\n1 975.1356\n```\n:::\n\n```{.r .cell-code}\ndo(300)* {sample(TenMileRace, size=100) %>% summarize(sz = sd(net))}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           sz\n1    959.2438\n2    934.4931\n3    902.7186\n4   1004.3998\n5    945.9244\n6    833.2083\n7   1084.5855\n8    954.6535\n9    912.3901\n10   995.7918\n11  1042.0322\n12   982.1383\n13  1013.8613\n14   973.3382\n15   868.8083\n16   882.1596\n17   930.6375\n18   969.4653\n19   861.0170\n20   863.1551\n21   917.3276\n22   976.3435\n23   967.9830\n24   979.1732\n25  1093.7655\n26   872.7911\n27   985.4766\n28  1097.9533\n29  1000.4953\n30   930.4201\n31   891.1693\n32   918.4250\n33   890.3469\n34   998.7142\n35   956.7019\n36   922.2497\n37   978.6689\n38  1085.5178\n39   967.6515\n40   884.9708\n41   988.9340\n42   902.8769\n43   964.9145\n44  1018.4643\n45   970.9328\n46   901.6683\n47   864.7810\n48   965.4061\n49   946.0747\n50   882.1236\n51   984.0817\n52   984.4679\n53   899.1849\n54   903.5176\n55  1150.7143\n56   912.9922\n57  1027.8526\n58   982.6329\n59   929.1650\n60   902.0101\n61   988.0909\n62   952.8978\n63  1100.1091\n64   926.4893\n65   914.0777\n66   900.8727\n67  1109.5132\n68  1119.7061\n69   992.5568\n70  1021.6209\n71  1076.7835\n72   966.1313\n73  1004.1590\n74  1156.9103\n75   840.6673\n76   926.8184\n77   939.6269\n78  1016.1805\n79   995.6977\n80  1007.7892\n81  1066.5578\n82   981.6095\n83   854.4394\n84   886.8302\n85   935.1963\n86  1216.0214\n87   906.2919\n88   889.4195\n89   963.2870\n90   949.8067\n91  1036.6185\n92  1073.3345\n93   954.2095\n94  1141.1939\n95   952.1924\n96  1021.8267\n97   809.7284\n98  1048.6305\n99  1042.6614\n100 1131.7820\n101  943.6481\n102 1169.6773\n103  953.3547\n104  848.8096\n105  849.2869\n106  985.8172\n107  825.2414\n108  937.4161\n109  891.9053\n110 1037.3724\n111  877.5936\n112 1014.7396\n113  947.2007\n114  954.8917\n115  922.6524\n116 1046.5536\n117  966.0246\n118  938.6390\n119  960.6977\n120  879.0129\n121 1036.2257\n122  910.9719\n123 1010.0250\n124 1078.8867\n125  888.4951\n126  858.5824\n127  972.0682\n128 1109.6574\n129  849.3544\n130 1004.0963\n131  961.8095\n132  784.8440\n133 1115.5438\n134  998.9299\n135 1115.8560\n136  931.0851\n137  935.7776\n138  969.5563\n139  920.2575\n140  923.0128\n141  971.1214\n142  997.0698\n143  972.1763\n144  775.7842\n145 1063.2023\n146  975.4015\n147  918.7700\n148 1064.1902\n149  872.8863\n150 1039.3651\n151 1018.6946\n152  955.8719\n153  982.9815\n154  917.1532\n155  953.6226\n156  982.3155\n157 1030.6795\n158 1002.3261\n159  920.1648\n160  838.6909\n161  878.9505\n162  829.6094\n163  802.1561\n164  878.2401\n165 1079.2028\n166  936.0717\n167  950.5361\n168  890.8605\n169  799.3358\n170  897.8961\n171  849.0803\n172  969.3993\n173 1029.8031\n174  990.6682\n175  925.5050\n176  937.0910\n177  971.1083\n178 1027.6437\n179  965.4732\n180  947.4097\n181  862.0483\n182  978.1615\n183 1011.1505\n184  916.7871\n185  870.0635\n186  948.9761\n187  738.6006\n188  880.2537\n189 1132.9984\n190  936.7129\n191  974.7874\n192  830.0050\n193 1028.4885\n194  925.4232\n195  944.6962\n196 1010.6496\n197  895.0447\n198  999.6950\n199  943.9454\n200  998.0013\n201  954.2335\n202  885.1100\n203 1075.9155\n204  893.7337\n205  912.3288\n206 1071.6367\n207  995.9273\n208 1010.3681\n209  961.2334\n210  900.9868\n211 1072.2501\n212  994.5600\n213  893.5359\n214  971.3190\n215  956.0959\n216 1042.6597\n217  900.4032\n218  968.4890\n219 1003.1355\n220  899.7613\n221 1053.0005\n222  863.0198\n223  909.3720\n224 1007.0371\n225  972.8755\n226  903.5665\n227  830.5423\n228 1007.5047\n229  995.8490\n230 1001.6037\n231 1144.1433\n232  964.1477\n233  979.6971\n234  961.2329\n235  874.1971\n236 1070.5725\n237 1191.2779\n238  892.8464\n239 1011.2156\n240  960.1700\n241  840.5881\n242  932.5718\n243  989.4362\n244  893.0370\n245  959.4814\n246  958.7799\n247  924.1331\n248 1010.0642\n249  946.5351\n250  863.7615\n251 1000.0322\n252 1015.9743\n253 1011.4132\n254 1010.4164\n255 1043.1718\n256  881.4145\n257  948.0952\n258  893.7342\n259  953.5396\n260 1069.0680\n261  988.2130\n262  970.3683\n263  874.7507\n264  938.8513\n265  935.1249\n266  880.9166\n267  851.8317\n268 1104.5321\n269  915.6692\n270  990.3238\n271  975.4803\n272  953.9365\n273 1114.3836\n274  895.4929\n275 1092.3845\n276 1172.3690\n277  940.7486\n278  920.0572\n279  907.1867\n280 1035.7034\n281  862.5798\n282  962.2298\n283 1044.7607\n284  896.3378\n285  868.4049\n286 1116.9921\n287  993.4000\n288 1024.9986\n289 1003.5813\n290  982.7132\n291 1096.3792\n292  929.5512\n293  990.4498\n294 1005.9827\n295 1034.0473\n296  924.9723\n297 1000.3796\n298  846.3115\n299 1015.2422\n300  988.0119\n```\n:::\n\n```{.r .cell-code}\n{do(300)* {sample(TenMileRace, size=100) %>% summarize(sz = sd(net))}} %>% summarize(m = mean(sz), s=sd(sz))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         m        s\n1 969.3981 85.39019\n```\n:::\n\n```{.r .cell-code}\n{do(300)* {sample(TenMileRace, size=400) %>% summarize(sz = sd(net))}} %>% summarize(m = mean(sz), s=sd(sz))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         m        s\n1 971.7669 44.20284\n```\n:::\n:::\n\n\n5. Using a sample size that's four times larger doesn't affect the mean, but it reduces the standard deviation by a factor of two.\n\n6. Increasing the number of trials does have any noticeable effect on either the mean or standard deviation.\n\n----------\n\n## 20.E\n\nThroughout this course, you're going to be using `lm()` to build models. Often, to demonstrate \"**sampling variation**.\" you will use `sample()` on a dataset or a DAG to generate a random sample and then send the result as the `data=` argument to `lm()`,\n\nHere are three computer commands that use the `data=` argument in different ways. One of them doesn't work at all. Which one?\n\n```r\nsample(mtcars, size=10) %>% lm(mpg ~ wt + hp, data=.)\nsample(mtcars, size=10) %>% lm(mpg ~ wt + hp)\nlm(mpg ~ wt + hp, data=sample(mtcars, size=10))\n```\n\n::: {.callout-warning}\n## In draft\n\nThis problem would be come irrelevant if the `fitmodel()` command described in the [Lesson 19 NTI]{../NTI/NTI-Lesson19.html} is being used.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}