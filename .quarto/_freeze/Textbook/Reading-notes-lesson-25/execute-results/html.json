{
  "hash": "4501786454f0ede07bd09de61c494fe1",
  "result": {
    "markdown": "---\ntitle: \"Mechanics of prediction\"\noutput:\n  html_document:\n    theme: lumen\n    toc: yes\n    toc_float: yes\n    css: NTI.css\n  pdf_document:\n    toc: yes\n---\n\n\n\n\nAn effect size describes the relationship between two variables in an input/output format. Lesson 24 introduced effect size in the context of causal connections as if turning a knob to change the input will produce a change in the output. Such mechanistic connections make for a nice mental image for those considering intervening in the world but can be misleading. \n\nFirst, the mere calculation of an effect size does not establish a causal connection. The statistical thinker has more work to do to justify a causal claim, as we will see in Lesson 30. \n\nSecond, owing to noise, the input/output relationship quantified by an effect size may not be evident in a single intervention, say, increasing a drug dose for any given individual patient. Instead, effect sizes are descriptions of *average* effects---trends---across a large group of individuals. \n\nThis Lesson is about *prediction*: what a model can properly say about the outcome of an individual case. Often, the setting is that we know values for some aspects of the individual but have yet to learn some other aspect of interest. \n\nThe word \"prediction\" suggests the future but also applies to saying what we can about an unknown current or past state. Synonyms for \"prediction\" include \"classification\" (Lessons 34 and 35), \"conjecture,\" \"guess,\" and \"bet.\" The phrase \"informed guess\" is a good description of prediction: using available information to support decision-making about the unknown.\n\n::: {.callout-note}\n## Example: Differential diagnosis\n\nA patient comes to an urgent-care clinic with symptoms. The healthcare professional tries to diagnose what disease or illness the patient has. A diagnosis is a prediction. The inputs to the prediction are the symptoms---neck stiffness, a tremor, and so on---as well as facts about the person, such as age, sex, occupation, and family history. The prediction output is a set of probabilities, one for each medical condition that could cause the symptoms. \n\nDoctors learn to perform a *differential diagnosis*, where the current set of probabilities informs the choices of additional tests and treatments. The probabilities are updated based on the information gained from the tests and treatments. This update may suggest new tests or treatments, the results of which may drive a new update. The television drama *House* provides an example of the evolving predictions of differential diagnosis in every episode.\n:::\n\nDifferential diagnosis is a cycle of prediction and action. This Lesson, however, is about the mechanics of prediction: taking what we know about an individual and producing an informed guess about what we do not yet know.\n\n## The prediction machine\n\nA statistical prediction is the output of a kind of special-purpose machine. The inputs given to the machine are values for what we already know; the output is a value (or interval) for the as-yet-unknown aspects of the system. \n\nThere are always two phases involved in making a prediction. The first is building the prediction machine. The second phase is providing the machine with inputs for the individual case, turning the machine crank, and receiving the prediction as output.\n\nThese two phases require different sorts of data. Building the machine requires a \"historical\" data set that includes records from many instances where we already know two things: the values of the inputs and the observed output. The word \"historical\" emphasizes that the machine-building data must already have known values for each of the inputs and outputs of interest.\n\nThe evaluation phase---turning the crank of the machine---is simple. Take the input values for the individual to be predicted, put those inputs into the machine, and receive a predicted value as output. Those input values may come from pure speculation or the measured values from a specific case of interest.\n\n## Building and using the machine\n\nTo illustrate building a prediction machine, we turn to a problem first considered quantitatively in the 1880s: the relationship between parents' heights and their children's heights at adulthood. The `Galton` data frame records the heights of about 900 children, along with their parents' heights.  Suppose we want to predict a child's adult height (variable name: `height`) from his or her parents' heights (`mother` and `father`). An appropriate model formula is `height ~ mother + father`. We use the model-training function`lm()` to transform the model formula and the data into a model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMod1 <- lm(height ~ mother + father, data = Galton)\n```\n:::\n\nAs the output of an R function, `Mod1` is a computer object. It incorporates a variety of information organized in a somewhat complex way. There are several often-used ways to extract this information in ways that serve specific purposes.\n\nOne of the most common ways to see what is in a computer object like `Mod1` is by printing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(Mod1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = height ~ mother + father, data = Galton)\n\nCoefficients:\n(Intercept)       mother       father  \n    22.3097       0.2832       0.3799  \n```\n:::\n:::\n\nNewcomers to technical computing tend to confuse the printed form of an object with the object itself. For example, the `Mod1` object contains many components, but the printed form displays only two: the model coefficients and the command used to construct the object. \n\nWe have already used some other functions to extract information from a model object. For instance,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMod1 %>% coefficients()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept)      mother      father \n 22.3097055   0.2832145   0.3798970 \n```\n:::\n\n```{.r .cell-code}\nMod1 %>% confint()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 2.5 %     97.5 %\n(Intercept) 13.8569119 30.7624990\nmother       0.1867750  0.3796540\nfather       0.2898301  0.4699639\n```\n:::\n\n```{.r .cell-code}\nMod1 %>% regression_summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 Ã— 5\n  term        estimate std.error statistic  p.value\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)   22.3      4.31        5.18 2.74e- 7\n2 mother         0.283    0.0491      5.76 1.13e- 8\n3 father         0.380    0.0459      8.28 4.52e-16\n```\n:::\n:::\n\n\nAnother extractor, `model_eval()`, is particularly convenient for prediction. Perhaps the most common use is to provide new input values to the model function, with `model_eval()` producing a data frame showing the output of the model function. To illustrate, here is how to calculate the predicted height of the child of a 63-inch-tall mother and a 68-inch father.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMod1 %>% model_eval(mother = 63, father=68)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  mother father  .output     .lwr     .upr\n1     63     68 65.98521 59.33448 72.63594\n```\n:::\n:::\n\nThe data frame includes the input values along with a point value for the prediction (`.output`) and a prediction interval (`.lwr` to `.upr`).\n\nNaturally, the predictions depend on the explanatory variables used in the model. For example, here is a model that uses only `sex` to predict the child's height:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMod2 <- lm(height ~ sex, data = Galton)\nMod2 %>% model_eval(sex=c(\"F\", \"M\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  sex  .output     .lwr     .upr\n1   F 64.11016 59.18024 69.04009\n2   M 69.22882 64.29928 74.15835\n```\n:::\n:::\n\n\nThis model includes three explanatory variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMod3 <- lm(height ~ mother + father + sex, data = Galton)\nMod3 %>% model_eval(mother=63, father=68, sex=c(\"F\", \"M\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  mother father sex  .output     .lwr     .upr\n1     63     68   F 63.20546 58.97128 67.43964\n2     63     68   M 68.43141 64.19783 72.66499\n```\n:::\n:::\n\n\nIn Lesson 26, we will look at the components that make up the prediction interval and some ways to use it.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}